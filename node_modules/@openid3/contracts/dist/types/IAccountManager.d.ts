import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace IAccountManager {
    type ValidationDataStruct = {
        enabled: boolean;
        validAfter: BigNumberish;
        validUntil: BigNumberish;
    };
    type ValidationDataStructOutput = [
        enabled: boolean,
        validAfter: bigint,
        validUntil: bigint
    ] & {
        enabled: boolean;
        validAfter: bigint;
        validUntil: bigint;
    };
}
export interface IAccountManagerInterface extends Interface {
    getFunction(nameOrSignature: "getValidationData" | "grant" | "revoke" | "setMetadata" | "validateSignature"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Grant" | "NewMetadata" | "Revoke"): EventFragment;
    encodeFunctionData(functionFragment: "getValidationData", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "grant", values: [AddressLike, IAccountManager.ValidationDataStruct]): string;
    encodeFunctionData(functionFragment: "revoke", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setMetadata", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "validateSignature", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "getValidationData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grant", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMetadata", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateSignature", data: BytesLike): Result;
}
export declare namespace GrantEvent {
    type InputTuple = [
        account: AddressLike,
        operator: AddressLike,
        data: IAccountManager.ValidationDataStruct
    ];
    type OutputTuple = [
        account: string,
        operator: string,
        data: IAccountManager.ValidationDataStructOutput
    ];
    interface OutputObject {
        account: string;
        operator: string;
        data: IAccountManager.ValidationDataStructOutput;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace NewMetadataEvent {
    type InputTuple = [account: AddressLike, metadata: BytesLike];
    type OutputTuple = [account: string, metadata: string];
    interface OutputObject {
        account: string;
        metadata: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RevokeEvent {
    type InputTuple = [account: AddressLike, operator: AddressLike];
    type OutputTuple = [account: string, operator: string];
    interface OutputObject {
        account: string;
        operator: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IAccountManager extends BaseContract {
    connect(runner?: ContractRunner | null): IAccountManager;
    waitForDeployment(): Promise<this>;
    interface: IAccountManagerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getValidationData: TypedContractMethod<[
        account: AddressLike,
        validator: AddressLike
    ], [
        IAccountManager.ValidationDataStructOutput
    ], "nonpayable">;
    grant: TypedContractMethod<[
        operator: AddressLike,
        data: IAccountManager.ValidationDataStruct
    ], [
        void
    ], "nonpayable">;
    revoke: TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
    setMetadata: TypedContractMethod<[metadata: BytesLike], [void], "nonpayable">;
    validateSignature: TypedContractMethod<[
        challenge: BytesLike,
        signature: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getValidationData"): TypedContractMethod<[
        account: AddressLike,
        validator: AddressLike
    ], [
        IAccountManager.ValidationDataStructOutput
    ], "nonpayable">;
    getFunction(nameOrSignature: "grant"): TypedContractMethod<[
        operator: AddressLike,
        data: IAccountManager.ValidationDataStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revoke"): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMetadata"): TypedContractMethod<[metadata: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "validateSignature"): TypedContractMethod<[
        challenge: BytesLike,
        signature: BytesLike
    ], [
        bigint
    ], "view">;
    getEvent(key: "Grant"): TypedContractEvent<GrantEvent.InputTuple, GrantEvent.OutputTuple, GrantEvent.OutputObject>;
    getEvent(key: "NewMetadata"): TypedContractEvent<NewMetadataEvent.InputTuple, NewMetadataEvent.OutputTuple, NewMetadataEvent.OutputObject>;
    getEvent(key: "Revoke"): TypedContractEvent<RevokeEvent.InputTuple, RevokeEvent.OutputTuple, RevokeEvent.OutputObject>;
    filters: {
        "Grant(address,address,tuple)": TypedContractEvent<GrantEvent.InputTuple, GrantEvent.OutputTuple, GrantEvent.OutputObject>;
        Grant: TypedContractEvent<GrantEvent.InputTuple, GrantEvent.OutputTuple, GrantEvent.OutputObject>;
        "NewMetadata(address,bytes)": TypedContractEvent<NewMetadataEvent.InputTuple, NewMetadataEvent.OutputTuple, NewMetadataEvent.OutputObject>;
        NewMetadata: TypedContractEvent<NewMetadataEvent.InputTuple, NewMetadataEvent.OutputTuple, NewMetadataEvent.OutputObject>;
        "Revoke(address,address)": TypedContractEvent<RevokeEvent.InputTuple, RevokeEvent.OutputTuple, RevokeEvent.OutputObject>;
        Revoke: TypedContractEvent<RevokeEvent.InputTuple, RevokeEvent.OutputTuple, RevokeEvent.OutputObject>;
    };
}
