import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export type AttestationPayloadStruct = {
    schemaId: BytesLike;
    expirationDate: BigNumberish;
    subject: BytesLike;
    attestationData: BytesLike;
};
export type AttestationPayloadStructOutput = [
    schemaId: string,
    expirationDate: bigint,
    subject: string,
    attestationData: string
] & {
    schemaId: string;
    expirationDate: bigint;
    subject: string;
    attestationData: string;
};
export interface OpenId3TeeModuleInterface extends Interface {
    getFunction(nameOrSignature: "GOOGLE_PROVIDER" | "SCHEMA_ID" | "run" | "signer" | "supportsInterface"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Attested"): EventFragment;
    encodeFunctionData(functionFragment: "GOOGLE_PROVIDER", values?: undefined): string;
    encodeFunctionData(functionFragment: "SCHEMA_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "run", values: [AttestationPayloadStruct, BytesLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "signer", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "GOOGLE_PROVIDER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SCHEMA_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
export declare namespace AttestedEvent {
    type InputTuple = [accAndTypeHash: BytesLike, subject: BytesLike];
    type OutputTuple = [accAndTypeHash: string, subject: string];
    interface OutputObject {
        accAndTypeHash: string;
        subject: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface OpenId3TeeModule extends BaseContract {
    connect(runner?: ContractRunner | null): OpenId3TeeModule;
    waitForDeployment(): Promise<this>;
    interface: OpenId3TeeModuleInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    GOOGLE_PROVIDER: TypedContractMethod<[], [string], "view">;
    SCHEMA_ID: TypedContractMethod<[], [string], "view">;
    run: TypedContractMethod<[
        attestationPayload: AttestationPayloadStruct,
        validationPayload: BytesLike,
        arg2: AddressLike,
        arg3: BigNumberish
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceID: BytesLike
    ], [
        boolean
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "GOOGLE_PROVIDER"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "SCHEMA_ID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "run"): TypedContractMethod<[
        attestationPayload: AttestationPayloadStruct,
        validationPayload: BytesLike,
        arg2: AddressLike,
        arg3: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "signer"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;
    getEvent(key: "Attested"): TypedContractEvent<AttestedEvent.InputTuple, AttestedEvent.OutputTuple, AttestedEvent.OutputObject>;
    filters: {
        "Attested(bytes32,bytes)": TypedContractEvent<AttestedEvent.InputTuple, AttestedEvent.OutputTuple, AttestedEvent.OutputObject>;
        Attested: TypedContractEvent<AttestedEvent.InputTuple, AttestedEvent.OutputTuple, AttestedEvent.OutputObject>;
    };
}
