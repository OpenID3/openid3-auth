"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secp256r1Verifier__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "nn",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "pp",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608080604052346100195760c2908161001f823930815050f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c90816372a4c30f14605a57506391327ec614603457600080fd5b80600319360112605757604051600160601b63ffffffff60c01b03198152602090f35b80fd5b9050816003193601126088576f4319055258e8617b0c46353d039cdaae63ffffffff60c01b01198152602090f35b5080fdfea2646970667358221220caba42b4cc457bfcdcc84ea5d5a2094f2dafceec9eab2349b2258c2a3346df5464736f6c63430008150033";
const isSuperArgs = (xs) => xs.length > 1;
class Secp256r1Verifier__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.Secp256r1Verifier__factory = Secp256r1Verifier__factory;
Secp256r1Verifier__factory.bytecode = _bytecode;
Secp256r1Verifier__factory.abi = _abi;
