import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export type OpenIdZkProofPublicInputStruct = {
    kidHash: BytesLike;
    iat: string;
    jwtHeaderAndPayloadHash: BytesLike;
    jwtSignature: BytesLike;
};
export type OpenIdZkProofPublicInputStructOutput = [
    kidHash: string,
    iat: string,
    jwtHeaderAndPayloadHash: string,
    jwtSignature: string
] & {
    kidHash: string;
    iat: string;
    jwtHeaderAndPayloadHash: string;
    jwtSignature: string;
};
export interface GoogleZkAdminInterface extends Interface {
    getFunction(nameOrSignature: "JWT_TTL" | "MASK" | "cacheProof" | "getCert" | "getLinkedAccountHash" | "linkAccount" | "owner" | "plonkVerifier" | "register" | "renounceOwnership" | "revoke" | "supportsInterface" | "transferOwnership" | "validateSignature" | "validateSignatureViaCache"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AccountLinked" | "CertAdded" | "CertRevoked" | "OwnershipTransferred"): EventFragment;
    encodeFunctionData(functionFragment: "JWT_TTL", values?: undefined): string;
    encodeFunctionData(functionFragment: "MASK", values?: undefined): string;
    encodeFunctionData(functionFragment: "cacheProof", values: [
        AddressLike[],
        BytesLike[],
        OpenIdZkProofPublicInputStruct[],
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "getCert", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getLinkedAccountHash", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "linkAccount", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "plonkVerifier", values?: undefined): string;
    encodeFunctionData(functionFragment: "register", values: [BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "validateSignature", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "validateSignatureViaCache", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "JWT_TTL", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MASK", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cacheProof", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLinkedAccountHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "linkAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "plonkVerifier", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateSignatureViaCache", data: BytesLike): Result;
}
export declare namespace AccountLinkedEvent {
    type InputTuple = [account: AddressLike, idHash: BytesLike];
    type OutputTuple = [account: string, idHash: string];
    interface OutputObject {
        account: string;
        idHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace CertAddedEvent {
    type InputTuple = [kidHash: BytesLike, cert: AddressLike];
    type OutputTuple = [kidHash: string, cert: string];
    interface OutputObject {
        kidHash: string;
        cert: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace CertRevokedEvent {
    type InputTuple = [kidHash: BytesLike];
    type OutputTuple = [kidHash: string];
    interface OutputObject {
        kidHash: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OwnershipTransferredEvent {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface GoogleZkAdmin extends BaseContract {
    connect(runner?: ContractRunner | null): GoogleZkAdmin;
    waitForDeployment(): Promise<this>;
    interface: GoogleZkAdminInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    JWT_TTL: TypedContractMethod<[], [bigint], "view">;
    MASK: TypedContractMethod<[], [string], "view">;
    cacheProof: TypedContractMethod<[
        accounts: AddressLike[],
        challenges: BytesLike[],
        inputs: OpenIdZkProofPublicInputStruct[],
        circuitDigest: BytesLike,
        proof: BytesLike
    ], [
        void
    ], "nonpayable">;
    getCert: TypedContractMethod<[kidHash: BytesLike], [string], "view">;
    getLinkedAccountHash: TypedContractMethod<[
        account: AddressLike
    ], [
        string
    ], "view">;
    linkAccount: TypedContractMethod<[idHash: BytesLike], [void], "nonpayable">;
    owner: TypedContractMethod<[], [string], "view">;
    plonkVerifier: TypedContractMethod<[], [string], "view">;
    register: TypedContractMethod<[
        kidHash: BytesLike,
        provider: BytesLike,
        N: BytesLike
    ], [
        void
    ], "nonpayable">;
    renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;
    revoke: TypedContractMethod<[kidHash: BytesLike], [void], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    validateSignature: TypedContractMethod<[
        challenge: BytesLike,
        validationData: BytesLike
    ], [
        bigint
    ], "view">;
    validateSignatureViaCache: TypedContractMethod<[
        challenge: BytesLike,
        validationData: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "JWT_TTL"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "MASK"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "cacheProof"): TypedContractMethod<[
        accounts: AddressLike[],
        challenges: BytesLike[],
        inputs: OpenIdZkProofPublicInputStruct[],
        circuitDigest: BytesLike,
        proof: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "getCert"): TypedContractMethod<[kidHash: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getLinkedAccountHash"): TypedContractMethod<[account: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "linkAccount"): TypedContractMethod<[idHash: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "plonkVerifier"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "register"): TypedContractMethod<[
        kidHash: BytesLike,
        provider: BytesLike,
        N: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "revoke"): TypedContractMethod<[kidHash: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "validateSignature"): TypedContractMethod<[
        challenge: BytesLike,
        validationData: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "validateSignatureViaCache"): TypedContractMethod<[
        challenge: BytesLike,
        validationData: BytesLike
    ], [
        bigint
    ], "view">;
    getEvent(key: "AccountLinked"): TypedContractEvent<AccountLinkedEvent.InputTuple, AccountLinkedEvent.OutputTuple, AccountLinkedEvent.OutputObject>;
    getEvent(key: "CertAdded"): TypedContractEvent<CertAddedEvent.InputTuple, CertAddedEvent.OutputTuple, CertAddedEvent.OutputObject>;
    getEvent(key: "CertRevoked"): TypedContractEvent<CertRevokedEvent.InputTuple, CertRevokedEvent.OutputTuple, CertRevokedEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    filters: {
        "AccountLinked(address,bytes32)": TypedContractEvent<AccountLinkedEvent.InputTuple, AccountLinkedEvent.OutputTuple, AccountLinkedEvent.OutputObject>;
        AccountLinked: TypedContractEvent<AccountLinkedEvent.InputTuple, AccountLinkedEvent.OutputTuple, AccountLinkedEvent.OutputObject>;
        "CertAdded(bytes32,address)": TypedContractEvent<CertAddedEvent.InputTuple, CertAddedEvent.OutputTuple, CertAddedEvent.OutputObject>;
        CertAdded: TypedContractEvent<CertAddedEvent.InputTuple, CertAddedEvent.OutputTuple, CertAddedEvent.OutputObject>;
        "CertRevoked(bytes32)": TypedContractEvent<CertRevokedEvent.InputTuple, CertRevokedEvent.OutputTuple, CertRevokedEvent.OutputObject>;
        CertRevoked: TypedContractEvent<CertRevokedEvent.InputTuple, CertRevokedEvent.OutputTuple, CertRevokedEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    };
}
