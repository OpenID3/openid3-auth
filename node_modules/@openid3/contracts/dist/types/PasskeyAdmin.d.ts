import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export type PasskeyStruct = {
    pubKeyX: BigNumberish;
    pubKeyY: BigNumberish;
};
export type PasskeyStructOutput = [pubKeyX: bigint, pubKeyY: bigint] & {
    pubKeyX: bigint;
    pubKeyY: bigint;
};
export interface PasskeyAdminInterface extends Interface {
    getFunction(nameOrSignature: "getPasskeyId" | "setPasskey" | "supportsInterface" | "validateSignature"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "PasskeySet"): EventFragment;
    encodeFunctionData(functionFragment: "getPasskeyId", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setPasskey", values: [PasskeyStruct, string]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "validateSignature", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "getPasskeyId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPasskey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateSignature", data: BytesLike): Result;
}
export declare namespace PasskeySetEvent {
    type InputTuple = [
        account: AddressLike,
        keyId: BytesLike,
        pubKey: PasskeyStruct,
        passkeyId: string
    ];
    type OutputTuple = [
        account: string,
        keyId: string,
        pubKey: PasskeyStructOutput,
        passkeyId: string
    ];
    interface OutputObject {
        account: string;
        keyId: string;
        pubKey: PasskeyStructOutput;
        passkeyId: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface PasskeyAdmin extends BaseContract {
    connect(runner?: ContractRunner | null): PasskeyAdmin;
    waitForDeployment(): Promise<this>;
    interface: PasskeyAdminInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getPasskeyId: TypedContractMethod<[account: AddressLike], [string], "view">;
    setPasskey: TypedContractMethod<[
        pubKey: PasskeyStruct,
        passkeyId: string
    ], [
        void
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    validateSignature: TypedContractMethod<[
        challenge: BytesLike,
        validationData: BytesLike
    ], [
        bigint
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getPasskeyId"): TypedContractMethod<[account: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "setPasskey"): TypedContractMethod<[
        pubKey: PasskeyStruct,
        passkeyId: string
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "validateSignature"): TypedContractMethod<[
        challenge: BytesLike,
        validationData: BytesLike
    ], [
        bigint
    ], "view">;
    getEvent(key: "PasskeySet"): TypedContractEvent<PasskeySetEvent.InputTuple, PasskeySetEvent.OutputTuple, PasskeySetEvent.OutputObject>;
    filters: {
        "PasskeySet(address,bytes32,tuple,string)": TypedContractEvent<PasskeySetEvent.InputTuple, PasskeySetEvent.OutputTuple, PasskeySetEvent.OutputObject>;
        PasskeySet: TypedContractEvent<PasskeySetEvent.InputTuple, PasskeySetEvent.OutputTuple, PasskeySetEvent.OutputObject>;
    };
}
