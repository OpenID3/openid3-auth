import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "./common";
export interface IOpenId3AccountInterface extends Interface {
    getFunction(nameOrSignature: "getAdmin" | "getMode" | "getOperator" | "initialize"): FunctionFragment;
    encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "getOperator", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [BytesLike, BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOperator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
}
export interface IOpenId3Account extends BaseContract {
    connect(runner?: ContractRunner | null): IOpenId3Account;
    waitForDeployment(): Promise<this>;
    interface: IOpenId3AccountInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getAdmin: TypedContractMethod<[], [string], "view">;
    getMode: TypedContractMethod<[], [bigint], "view">;
    getOperator: TypedContractMethod<[], [string], "view">;
    initialize: TypedContractMethod<[
        adminData: BytesLike,
        operatorData: BytesLike,
        metadata: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getAdmin"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getMode"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getOperator"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        adminData: BytesLike,
        operatorData: BytesLike,
        metadata: BytesLike
    ], [
        void
    ], "nonpayable">;
    filters: {};
}
