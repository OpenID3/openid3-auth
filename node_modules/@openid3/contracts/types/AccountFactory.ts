/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AccountFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountImpl"
      | "accountProxy"
      | "clone"
      | "cloneWithAdminOnly"
      | "deploy"
      | "predictClonedAddress"
      | "predictDeployedAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AccountDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "accountImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountProxy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clone", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "cloneWithAdminOnly",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "deploy", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "predictClonedAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictDeployedAddress",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cloneWithAdminOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictClonedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictDeployedAddress",
    data: BytesLike
  ): Result;
}

export namespace AccountDeployedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AccountFactory;
  waitForDeployment(): Promise<this>;

  interface: AccountFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountImpl: TypedContractMethod<[], [string], "view">;

  accountProxy: TypedContractMethod<[], [string], "view">;

  clone: TypedContractMethod<[accountData: BytesLike], [string], "nonpayable">;

  cloneWithAdminOnly: TypedContractMethod<
    [adminData: BytesLike],
    [string],
    "nonpayable"
  >;

  deploy: TypedContractMethod<[accountData: BytesLike], [string], "nonpayable">;

  predictClonedAddress: TypedContractMethod<
    [salt: BytesLike],
    [string],
    "view"
  >;

  predictDeployedAddress: TypedContractMethod<
    [accountData: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "clone"
  ): TypedContractMethod<[accountData: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "cloneWithAdminOnly"
  ): TypedContractMethod<[adminData: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<[accountData: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "predictClonedAddress"
  ): TypedContractMethod<[salt: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "predictDeployedAddress"
  ): TypedContractMethod<[accountData: BytesLike], [string], "view">;

  getEvent(
    key: "AccountDeployed"
  ): TypedContractEvent<
    AccountDeployedEvent.InputTuple,
    AccountDeployedEvent.OutputTuple,
    AccountDeployedEvent.OutputObject
  >;

  filters: {
    "AccountDeployed(address)": TypedContractEvent<
      AccountDeployedEvent.InputTuple,
      AccountDeployedEvent.OutputTuple,
      AccountDeployedEvent.OutputObject
    >;
    AccountDeployed: TypedContractEvent<
      AccountDeployedEvent.InputTuple,
      AccountDeployedEvent.OutputTuple,
      AccountDeployedEvent.OutputObject
    >;
  };
}
