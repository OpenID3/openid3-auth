/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { AccountProxy, AccountProxyInterface } from "../AccountProxy";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitiated",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "logic",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "initProxy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761043b908161001c8239f35b600080fdfe60806040526004361015610018575b366100a5576100a5565b6000803560e01c63ead30dd41461002f575061000e565b346100a25760403660031901126100a2576004356001600160a01b038116810361009e57602435906001600160401b039081831161009a573660238401121561009a57826004013591821161009a57366024838501011161009a57602461009793019061013a565b80f35b8380fd5b5080fd5b80fd5b6000805160206103e683398151915254600090819081906001600160a01b0316368280378136915af43d82803e156100db573d90f35b3d90fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f191682016001600160401b0381118382101761011a57604052565b6100df565b6001600160401b03811161011a57601f01601f191660200190565b6000805160206103e6833981519152805492939192916001600160a01b039081841661025c5761017161016c8261011f565b6100f5565b9581875236828201116102575781600092602092838a013787010152833b156101fc5783166001600160a01b031992909216821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151158015906101f4575b6101df575050565b6101f1916101eb61026e565b916102c7565b50565b5060006101d7565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b604051631b6c056760e11b8152600490fd5b60405190606082016001600160401b0381118382101761011a5760405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806102fc9493602081519101845af43d156102ff573d916102ec61016c8461011f565b9283523d6000602085013e610353565b90565b606091610353565b1561030e57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156103735750815115610367575090565b6102fc903b1515610307565b8251909150156103865750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b8285106103cc575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506103a956fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212207ef7b17794b216415eb0b4cd60b32f0fdc5417c48fd674b4762838ee03347d2464736f6c63430008150033";

type AccountProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountProxy__factory extends ContractFactory {
  constructor(...args: AccountProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AccountProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AccountProxy__factory {
    return super.connect(runner) as AccountProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountProxyInterface {
    return new Interface(_abi) as AccountProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AccountProxy {
    return new Contract(address, _abi, runner) as unknown as AccountProxy;
  }
}
