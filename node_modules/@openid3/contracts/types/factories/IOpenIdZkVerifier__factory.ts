/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IOpenIdZkVerifier,
  IOpenIdZkVerifierInterface,
} from "../IOpenIdZkVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getIdHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVerificationKeyOfIdp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "op",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "kidHash",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "iat",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "jwtHeaderAndPayloadHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "jwtSignature",
            type: "bytes",
          },
        ],
        internalType: "struct OpenIdZkProofPublicInput",
        name: "input",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation[]",
        name: "ops",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "kidHash",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "iat",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "jwtHeaderAndPayloadHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "jwtSignature",
            type: "bytes",
          },
        ],
        internalType: "struct OpenIdZkProofPublicInput[]",
        name: "inputs",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "aggregatedProof",
        type: "bytes",
      },
    ],
    name: "verifyAggregated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IOpenIdZkVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): IOpenIdZkVerifierInterface {
    return new Interface(_abi) as IOpenIdZkVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IOpenIdZkVerifier {
    return new Contract(address, _abi, runner) as unknown as IOpenIdZkVerifier;
  }
}
